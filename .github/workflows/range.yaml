name: MongoDB-Deploy-Additional-Pods
on:
  workflow_dispatch:
    inputs:
      namespace:
        type: choice
        description: 'Namespace Environment'
        options:
        - tic23-dev
        - car-prd
        - clientmember-dev
        - accums-prd
        - accums-stg
        - accums-tst
        - accums-qa
        - accums-dev
        - car-dev
        - car-tst
        - car-qa
        - care-dev
        - care-qa
        - care-stg
        - pharm-dev
        - pharm-qa
        - pharm-stg
        - pharm-prd
        - trans-dev
        - cms-dev
        - cms-qa
        - cms-tst
        - adj-dev
        - adj-tst
        - adj-qa
        - adj-stg
        - adj-prd
        - cms-stg
        - cms-prd
        - tic-dev
        - tic00-dev
        - tic11-dev
        - aud-dev
        - ch-dev
        - cov-dev
        - cov-tst
        - cov-qa
        - cov-stg
        - cov-prd
        - fad-dev
        - fad-tst
        - fad-qa
        - fad-stg
        - fad-prd
        - mcef-dev
        - mcef-tst
        - mcef-qa
        - mcef-stg
        - mcef-prd
        - masterrouter-dev
        - masterrouter-tst
        - masterrouter-qa
      env:
        type: choice
        description: 'Cluster'
        options:
        - dev
        - test
        - qa
        - stage
        - prod
      c01-replicasLX:
        type: choice
        description: 'cluster C01 LX Replicas count'
        options:
        - "0"
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
      c02-replicasLX:
        type: choice
        description: 'cluster C02 LX Replicas count'
        options:
        - "0"
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
      c01-replicasVW:
        type: choice
        description: 'cluster C01 VW Replicas count'
        options:
        - "0"
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
      c02-replicasVW:
        type: choice
        description: 'cluster C02 VW Replicas count'
        options:
        - "0"
        - "1"
        - "2"
        - "3"
        - "4"
        - "5"
      dbpathStorage:
        type: choice
        description: 'Storage'
        options:
        - 50Gi
        - 60Gi
        - 70Gi
        - 80Gi
        - 90Gi
        - 100Gi
        - 200Gi
        - 2800Gi

env:
  tkgi_version: "1.11.0"
  tkgi_build_name: "tkgi-linux-amd64-1.11.0-build.192"
  pks_version: "1.7.0-build"
  pks_build_name: "pks-1.7.0-build-build.483"
  helm_version: "3.2.1"
  helm_build_name: "helm-3.2.1.tar.gz"
  memorylimits: "10Gi"
  memoryrequests: "5Gi"
  cpulimits: "250m"
  cpurequests: "100m"


jobs:
  additional-pods:
    runs-on: docker
    env:
      docker_version: 0.3
      release: 'kdbm'
      cluster4_5: 'f02'
      infoblox_username: 'svc-skynetdb'
      infoblox_password: ${{ secrets.INFOBLOX_PASSWORD }}
      dbStorageType: 'csi-local'
    steps:
      - name: Print workflow info to job summary & log
        continue-on-error: true
        run: |
          echo -e '## Actor: \nWorkflow triggered by ${{ github.triggering_actor }} (github.triggering_actor) with privileges of ${{ github.actor }} (github.actor).' >> $GITHUB_STEP_SUMMARY
          echo "*It's normal for some of the below values to be empty.*"
          echo -e '## Ref/Branch Info: \ngithub.ref: ${{ github.ref }} \ngithub.head_ref: ${{ github.head_ref }} \ngithub.base_ref: ${{ github.base_ref }} \ngithub.ref_protected: ${{ github.ref_protected }}' >> $GITHUB_STEP_SUMMARY
          echo -e '## Workflow Inputs: \n${{ toJSON(inputs) }}' >> $GITHUB_STEP_SUMMARY
          cat << EndOfMessage
          Print full github object to log:
          ${{ toJSON(github) }}
          EndOfMessage
          
      - name: Clear submodule if it exists and remove binaries if exists.
        run: |
          # Print out info about the current directory
          pwd
          ls -l
          # Remove the problematic submodule if it exists
          rm -rf ./skynet-mongodb/skynet-mongodb
          
      - name: Code Checkout
        uses: actions/checkout@v3
        with:
          path: skynet

      - name: Create Configmap
        run: |
           mkdir configmap || true
           cp ./skynet/run.sh configmap/run.sh

      - name: "Set environment variables"
        run: |
          if ${{ inputs.env == 'stage' }}
          then
            TKGI_USR="${{ secrets.TKGI_STG_USR }}"
            TKGI_PSW="${{ secrets.TKGI_STG_PSW }}"
            echo "TKGI_USR=${TKGI_USR}" >> $GITHUB_ENV
            echo "TKGI_PSW=${TKGI_PSW}" >> $GITHUB_ENV
          elif ${{ inputs.env == 'prod' }}
          then
            TKGI_USR="${{ secrets.TKGI_PROD_USR }}"
            TKGI_PSW="${{ secrets.TKGI_PROD_PSW }}"
            echo "TKGI_USR=${TKGI_USR}" >> $GITHUB_ENV
            echo "TKGI_PSW=${TKGI_PSW}" >> $GITHUB_ENV
          else 
            TKGI_USR="${{ secrets.TKGI_NONP_USR }}"
            TKGI_PSW="${{ secrets.TKGI_NONP_PSW }}"
            echo "TKGI_USR=${TKGI_USR}" >> $GITHUB_ENV
            echo "TKGI_PSW=${TKGI_PSW}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Download kubectl binary
        run: |
          (cd /tmp && curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl)

      - name: Kubectl permissions
        run: |
          sudo mv /tmp/kubectl /usr/local/bin/kubectl
          chmod +x /usr/local/bin/kubectl
        
      - name: Download tkgi binary
        run: |
          download_url="https://repo.primetherapeutics.com/repository/dts-release/cli/tkgi/${{ env.tkgi_version }}/${{ env.tkgi_build_name }}"
          sudo wget -v -O /tmp/tkgi $download_url
          
      - name: TKGI permissions     
        run: |
          sudo mv /tmp/tkgi /usr/local/bin/tkgi
          sudo chmod +x /usr/local/bin/tkgi
          tkgi --version

      - name: Download pks binary
        run: |
          download_url="https://repo.primetherapeutics.com/repository/dts-release/cli/pks/${{ env.pks_version }}/${{ env.pks_build_name }}"
          sudo wget -v -O /tmp/pks $download_url

      - name: PKS permissions     
        run: |
          sudo mv /tmp/pks /usr/local/bin/pks
          sudo chmod +x /usr/local/bin/pks
          pks --version

      - name: Download helm binary
        run: |
          download_url="https://repo.primetherapeutics.com/repository/dts-release/cli/helm/${{ env.helm_version }}/${{ env.helm_build_name }}"
          sudo wget -v -O /tmp/helm.tar.gz $download_url

      - name: helm permissions     
        run: |
          cd /tmp/
          sudo tar xvf helm.tar.gz
          sudo ls -al
          sudo ls -al linux-amd64/
          sudo mv linux-amd64/helm /usr/local/bin

      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Log in to nonp C01 LX TKGI
        if: ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
        run: |
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-nonp-lx-f02 -a api.mkp-nonp-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-nonp-lx-$cluster4_5
          pod_running_count_c01_lx=$(kubectl get pods -n lx-${{ inputs.namespace }} -o name | grep "lxkdbmc01" | tr -d 'pod/' | wc -l | tr -d ' ')
          pod_desire_count_c01_lx=$(($pod_running_count_c01_lx + ${{ inputs.c01-replicasLX }} ))
          echo "pod_desire_count_c01_lx=${pod_desire_count_c01_lx}" >> $GITHUB_ENV
          echo "pod_running_count_c01_lx=${pod_running_count_c01_lx}" >> $GITHUB_ENV


      - name: Log in to prod C01 LX TKGI
        if: ${{ (inputs.env == 'stage') || (inputs.env == 'prod') }}
        run: |
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-prod-lx-f02 -a api.mkp-prod-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-prod-lx-$cluster4_5
          pod_running_count_c01_lx=$(kubectl get pods -n lx-${{ inputs.namespace }} -o name | grep "lxkdbmc01" | tr -d 'pod/' | wc -l | tr -d ' ')
          pod_desire_count_c01_lx=$(($pod_running_count_c01_lx + ${{ inputs.c01-replicasLX }} ))
          echo "pod_desire_count_c01_lx=${pod_desire_count_c01_lx}" >> $GITHUB_ENV
          echo "pod_running_count_c01_lx=${pod_running_count_c01_lx}" >> $GITHUB_ENV
        

      - name: Create C01 LX replica-set-expose.yaml file
        if: ${{ inputs.c01-replicasLX != '0' }}
        run: |
          svc_count=$(kubectl get svc -n lx-${{ inputs.namespace }} -o name | grep -v "lxkdbmc01-svc" | tr -d 'service/' | wc -l | tr -d ' ')
          START=$svc_count
          REQ_NUM=$(($svc_count + ${{inputs.c01-replicasLX}}))
          END=$(($svc_count + $REQ_NUM - 1))  
          for i in $(eval echo "{$START..$END}")
          do
          cat >> skynet/deployment_pod/templates/replica-set-expose.yaml << EOF
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: lxkdbmc01-$i
            namespace: lx-${{ inputs.namespace }}
          spec:
            externalTrafficPolicy: Cluster
            ports:
            - port: 27017
              protocol: TCP
              targetPort: 27017
            selector:
              statefulset.kubernetes.io/pod-name: lxkdbmc01-$i
            sessionAffinity: None
            type: LoadBalancer
          EOF
          done
      
      - name: Execute Helm Install LX C01
        if: ${{ inputs.c01-replicasLX != '0' }}
        run: |
          cat skynet/deployment_pod/templates/replica-set-expose.yaml
          groupId=$(kubectl get secret ${{ inputs.namespace }}-secret -n lx-${{ inputs.namespace }} --template={{.data.mmsGroupId}} | base64 -di)
          apikey=$(kubectl get secret ${{ inputs.namespace }}-secret -n lx-${{ inputs.namespace }} --template={{.data.mmsApiKey}} | base64 -di)
          helm upgrade --install lxkdbmc01 ./skynet/deployment_pod --set dockerVer=$docker_version --set replicas=$pod_desire_count_c01_lx --set memorylimits=${{ env.memorylimits }} --set memoryrequests=${{ env.memoryrequests }} --set cpulimits=${{ env.cpulimits }} --set cpurequests=${{ env.cpurequests }} --set dbpathStorage=${{ inputs.dbpathStorage }} --set dbStorageType=$dbStorageType --set mmsApiKey=$apikey --set mmsGroupId=$groupId -n lx-${{ inputs.namespace }}

      - name: Create the LX C01 deployment set file to update
        if: ${{ inputs.c01-replicasLX != '0' }}
        run: |
          kubectl get deployment lxkdbmc01 -n lx-${{ inputs.namespace }} -o yaml > $GITHUB_WORKSPACE/lx-c01-deployment.yaml
          cat lx-c01-deployment.yaml
          
      - name: Log in to nonp C02 LX TKGI
        if: ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
        run: |
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-nonp-lx-f02 -a api.mkp-nonp-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-nonp-lx-$cluster4_5
          pod_running_count_c02_lx=$(kubectl get pods -n lx-${{ inputs.namespace }} -o name | grep "lxkdbmc02" | tr -d 'pod/' | wc -l | tr -d ' ')
          pod_desire_count_c02_lx=$(($pod_running_count_c02_lx + ${{ inputs.c02-replicasLX }} ))
          echo "pod_desire_count_c02_lx=${pod_desire_count_c02_lx}" >> $GITHUB_ENV
          echo "pod_running_count_c02_lx=${pod_running_count_c02_lx}" >> $GITHUB_ENV


      - name: Log in to prod C02 LX TKGI
        if: ${{ (inputs.env == 'stage') || (inputs.env == 'prod') }}
        run: |
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-prod-lx-f02 -a api.mkp-prod-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-prod-lx-$cluster4_5
          pod_running_count_c02_lx=$(kubectl get pods -n lx-${{ inputs.namespace }} -o name | grep "lxkdbmc02" | tr -d 'pod/' | wc -l | tr -d ' ')
          pod_desire_count_c02_lx=$(($pod_running_count_c02_lx + ${{ inputs.c02-replicasLX }} ))
          echo "pod_desire_count_c02_lx=${pod_desire_count_c02_lx}" >> $GITHUB_ENV
          echo "pod_running_count_c02_lx=${pod_running_count_c02_lx}" >> $GITHUB_ENV

      - name: Create C02 LX replica-set-expose.yaml file
        if: ${{ inputs.c02-replicasLX != '0' }}
        run: |
          svc_count=$(kubectl get svc -n lx-${{ inputs.namespace }} -o name | grep -v "lxkdbmc02-svc" | tr -d 'service/' | wc -l | tr -d ' ')
          START=$svc_count
          REQ_NUM=$(($svc_count + ${{inputs.c01-replicasLX}}))
          END=$(($svc_count + $REQ_NUM - 1))  
          for i in $(eval echo "{$START..$END}")
          do
          cat >> skynet/deployment_pod/templates/replica-set-expose.yaml << EOF
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: lxkdbmc02-$i
            namespace: lx-${{ inputs.namespace }}
          spec:
            externalTrafficPolicy: Cluster
            ports:
            - port: 27017
              protocol: TCP
              targetPort: 27017
            selector:
              statefulset.kubernetes.io/pod-name: lxkdbmc02-$i
            sessionAffinity: None
            type: LoadBalancer
          EOF
          done
      
      - name: Execute Helm Install LX C02
        if: ${{ inputs.c02-replicasLX != '0' }}
        run: |
          groupId=$(kubectl get secret ${{ inputs.namespace }}-secret -n lx-${{ inputs.namespace }} --template={{.data.mmsGroupId}} | base64 -di)
          apikey=$(kubectl get secret ${{ inputs.namespace }}-secret -n lx-${{ inputs.namespace }} --template={{.data.mmsApiKey}} | base64 -di)
          helm upgrade --install lxkdbmc02 ./skynet/deployment_pod --set dockerVer=$docker_version --set replicas=$pod_desire_count_c02_lx --set memorylimits=${{ env.memorylimits }} --set memoryrequests=${{ env.memoryrequests }} --set cpulimits=${{ env.cpulimits }} --set cpurequests=${{ env.cpurequests }} --set dbpathStorage=${{ inputs.dbpathStorage }} --set dbStorageType=$dbStorageType --set mmsApiKey=$apikey --set mmsGroupId=$groupId -n lx-${{ inputs.namespace }}

      - name: Create the LX C02 deployment set file to update
        if: ${{ inputs.c02-replicasLX != '0' }}
        run: |
          kubectl get deployment lxkdbmc02 -n lx-${{ inputs.namespace }} -o yaml > $GITHUB_WORKSPACE/lx-c02-deployment.yaml
          cat $GITHUB_WORKSPACE/lx-c02-deployment.yaml
          
      - name: Log in to nonp C01 VW TKGI
        if: ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
        run: |
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-nonp-vw-f02 -a api.mkp-nonp-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-nonp-vw-$cluster4_5
          pod_running_count_c01_vw=$(kubectl get pods -n vw-${{ inputs.namespace }} -o name | grep "vwkdbmc01" | tr -d 'pod/' | wc -l | tr -d ' ')
          pod_desire_count_c01_vw=$(($pod_running_count_c01_vw + ${{ inputs.c01-replicasVW }} ))
          echo "pod_desire_count_c01_vw=${pod_desire_count_c01_vw}" >> $GITHUB_ENV
          echo "pod_running_count_c01_vw=${pod_running_count_c01_vw}" >> $GITHUB_ENV

      - name: Log in to prod C01 VW TKGI
        if: ${{ (inputs.env == 'stage') || (inputs.env == 'prod') }}
        run: |
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-prod-vw-f02 -a api.mkp-prod-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-prod-vw-$cluster4_5
          pod_running_count_c01_vw=$(kubectl get pods -n vw-${{ inputs.namespace }} -o name | grep "vwkdbmc01" | tr -d 'pod/' | wc -l | tr -d ' ')
          pod_desire_count_c01_vw=$(($pod_running_count_c01_vw + ${{ inputs.c01-replicasVW }} ))
          echo "pod_desire_count_c01_vw=${pod_desire_count_c01_vw}" >> $GITHUB_ENV
          echo "pod_running_count_c01_vw=${pod_running_count_c01_vw}" >> $GITHUB_ENV

      - name: Create C01 VW replica-set-expose.yaml file
        if: ${{ inputs.c01-replicasVW != '0' }}
        run: |
          svc_count=$(kubectl get svc -n vw-${{ inputs.namespace }} -o name | grep -v "vwkdbmc01-svc" | tr -d 'service/' | wc -l | tr -d ' ')
          START=$svc_count
          REQ_NUM=$(($svc_count + ${{inputs.c01-replicasLX}}))
          END=$(($svc_count + $REQ_NUM - 1))  
          for i in $(eval echo "{$START..$END}")
          do
          cat >> skynet/deployment_pod/templates/replica-set-expose.yaml << EOF
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: vwkdbmc01-$i
            namespace: vw-${{ inputs.namespace }}
          spec:
            externalTrafficPolicy: Cluster
            ports:
            - port: 27017
              protocol: TCP
              targetPort: 27017
            selector:
              statefulset.kubernetes.io/pod-name: vwkdbmc01-$i
            sessionAffinity: None
            type: LoadBalancer
          EOF
          done
      
      - name: Execute Helm Install VW C01
        if: ${{ inputs.c01-replicasVW != '0' }}
        run: |
          groupId=$(kubectl get secret ${{ inputs.namespace }}-secret -n vw-${{ inputs.namespace }} --template={{.data.mmsGroupId}} | base64 -di)
          apikey=$(kubectl get secret ${{ inputs.namespace }}-secret -n lx-${{ inputs.namespace }} --template={{.data.mmsApiKey}} | base64 -di)
          helm upgrade --install vwkdbmc01 ./skynet/deployment_pod --set dockerVer=$docker_version --set replicas=$pod_desire_count_c01_vw --set memorylimits=${{ env.memorylimits }} --set memoryrequests=${{ env.memoryrequests }} --set cpulimits=${{ env.cpulimits }} --set cpurequests=${{ env.cpurequests }} --set dbpathStorage=${{ inputs.dbpathStorage }} --set dbStorageType=$dbStorageType --set mmsApiKey=$apikey --set mmsGroupId=$groupId -n vw-${{ inputs.namespace }}

      - name: Create the VW C01 deployment set file to update
        if: ${{ inputs.c01-replicasVW != '0' }}
        run: |
          kubectl get deployment vwkdbmc01 -n vw-${{ inputs.namespace }} -o yaml > $GITHUB_WORKSPACE/vw-c01-deployment.yaml
          cat $GITHUB_WORKSPACE/vw-c01-deployment.yaml


      - name: Log in to nonp C02 VW TKGI
        if: ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
        run: |
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-nonp-vw-f02 -a api.mkp-nonp-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-nonp-vw-$cluster4_5
          pod_running_count_c02_vw=$(kubectl get pods -n vw-${{ inputs.namespace }} -o name | grep "vwkdbmc02" | tr -d 'pod/' | wc -l | tr -d ' ')
          pod_desire_count_c02_vw=$(($pod_running_count_c02_vw + ${{ inputs.c02-replicasVW }} ))
          echo "pod_desire_count_c02_vw=${pod_desire_count_c02_vw}" >> $GITHUB_ENV
          echo "pod_running_count_c02_vw=${pod_running_count_c02_vw}" >> $GITHUB_ENV

      - name: Log in to prod C02 VW TKGI
        if: ${{ (inputs.env == 'stage') || (inputs.env == 'prod') }}
        run: |
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-prod-vw-f02 -a api.mkp-prod-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-prod-vw-$cluster4_5
          pod_running_count_c02_vw=$(kubectl get pods -n vw-${{ inputs.namespace }} -o name | grep "vwkdbmc02" | tr -d 'pod/' | wc -l | tr -d ' ')
          pod_desire_count_c02_vw=$(($pod_running_count_c02_vw + ${{ inputs.c02-replicasVW }} ))
          echo "pod_desire_count_c02_vw=${pod_desire_count_c02_vw}" >> $GITHUB_ENV
          echo "pod_running_count_c02_vw=${pod_running_count_c02_vw}" >> $GITHUB_ENV

      - name: Create C02 VW replica-set-expose.yaml file
        if: ${{ inputs.c02-replicasVW != '0' }}
        run: |
          svc_count=$(kubectl get svc -n vw-${{ inputs.namespace }} -o name | grep -v "vwkdbmc02-svc" | tr -d 'service/' | wc -l | tr -d ' ')
          START=$svc_count
          REQ_NUM=$(($svc_count + ${{inputs.c01-replicasLX}}))
          END=$(($svc_count + $REQ_NUM - 1))  
          for i in $(eval echo "{$START..$END}")
          do
          cat >> skynet/deployment_pod/templates/replica-set-expose.yaml << EOF
          ---
          apiVersion: v1
          kind: Service
          metadata:
            name: vwkdbmc02-$i
            namespace: vw-${{ inputs.namespace }}
          spec:
            externalTrafficPolicy: Cluster
            ports:
            - port: 27017
              protocol: TCP
              targetPort: 27017
            selector:
              statefulset.kubernetes.io/pod-name: vwkdbmc02-$i
            sessionAffinity: None
            type: LoadBalancer
          EOF
          done
      
      - name: Execute Helm Install VW C02
        if: ${{ inputs.c02-replicasVW != '0' }}
        run: |
          groupId=$(kubectl get secret ${{ inputs.namespace }}-secret -n vw-${{ inputs.namespace }} --template={{.data.mmsGroupId}} | base64 -di)
          apikey=$(kubectl get secret ${{ inputs.namespace }}-secret -n lx-${{ inputs.namespace }} --template={{.data.mmsApiKey}} | base64 -di)
          helm upgrade --install vwkdbmc02 ./skynet/deployment_pod --set dockerVer=$docker_version --set replicas=$pod_desire_count_c02_vw --set memorylimits=${{ env.memorylimits }} --set memoryrequests=${{ env.memoryrequests }} --set cpulimits=${{ env.cpulimits }} --set cpurequests=${{ env.cpurequests }} --set dbpathStorage=${{ inputs.dbpathStorage }} --set dbStorageType=$dbStorageType --set mmsApiKey=$apikey --set mmsGroupId=$groupId -n vw-${{ inputs.namespace }}

      - name: Create the VW C02 deployment set file to update
        if: ${{ inputs.c02-replicasVW != '0' }}
        run: |
          kubectl get deployment vwkdbmc02 -n vw-${{ inputs.namespace }} -o yaml > $GITHUB_WORKSPACE/vw-c02-deployment.yaml
          cat $GITHUB_WORKSPACE/vw-c02-deployment.yaml

      - name: Update the LX C01 SVC IP in all places
        if: ${{ inputs.c01-replicasLX != '0' }}
        run: |
          sleep 10
          echo "Log in to nonp C01 LX TKGI"
          if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
          then
            tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-nonp-lx-f02 -a api.mkp-nonp-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
            kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-nonp-lx-$cluster4_5
          else 
            tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-prod-lx-f02 -a api.mkp-prod-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
            kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-prod-lx-$cluster4_5
          fi
          svc_count=$(kubectl get svc -n lx-${{ inputs.namespace }} -o name | grep -v "lxkdbmc01-svc" | tr -d 'service/' | wc -l | tr -d ' ')
          START=$(( $svc_count - 1 ))
          REQ_NUM=$(($svc_count + ${{inputs.c01-replicasLX}}))
          END=$(($svc_count - $REQ_NUM))
          for i in $(eval echo "{$START..$END}")
          do
            SVC_IP=$(kubectl get svc -n lx-${{ inputs.namespace }} lxkdbmc01-$i -o jsonpath="{.status.loadBalancer.ingress[*].ip}")
            HOSTNAME=lxkdbmc01-$i.lxkdbmc01-svc.lx-${{ inputs.namespace }}.svc.cluster.local
            echo "SVC_IP: $SVC_IP"
            echo "HOSTNAME: $HOSTNAME"
            kubectl patch deployment lxkdbmc01 -n lx-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            echo "patched in c01 lx"
            sleep 10
            echo "Log in to nonp C02 LX TKGI"
            if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
            then
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-nonp-lx-f02 -a api.mkp-nonp-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-nonp-lx-$cluster4_5
            else 
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-prod-lx-f02 -a api.mkp-prod-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-prod-lx-$cluster4_5
            fi
            lxkdbmc02_dep_exist=$(kubectl get deployment -n lx-${{ inputs.namespace }} -o name | grep "lxkdbmc02" | tr -d 'deployment.apps/' | wc -l | tr -d ' ')
            echo "lxkdbmc02_dep_exist=${lxkdbmc02_dep_exist}" >> $GITHUB_ENV
            if ${{ "$lxkdbmc02_dep_exist" -eq "1" }}
            then
                HOSTNAME=lxkdbmc02-$i.lxkdbmc02-svc.lx-${{ inputs.namespace }}.svc.cluster.local
                echo "SVC_IP: $SVC_IP"
                echo "HOSTNAME: $HOSTNAME"
                kubectl patch deployment lxkdbmc02 -n lx-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0","value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
                echo "patched in c02 lx"
            fi
            sleep 10
            echo "Log in to nonp C01 VW TKGI"
            if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
            then
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-nonp-vw-f02 -a api.mkp-nonp-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-nonp-vw-$cluster4_5
            else 
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-prod-vw-f02 -a api.mkp-prod-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-prod-vw-$cluster4_5
            fi
            vwkdbmc01_dep_exist=$(kubectl get deployment -n vw-${{ inputs.namespace }} -o name | grep "vwkdbmc01" | tr -d 'deployment.apps/' | wc -l | tr -d ' ')
            echo "vwkdbmc01_dep_exist=${vwkdbmc01_dep_exist}" >> $GITHUB_ENV
            if ${{ "$vwkdbmc01_dep_exist" -eq "1" }}
            then
                HOSTNAME=vwkdbmc01-$i.vwkdbmc01-svc.vw-${{ inputs.namespace }}.svc.cluster.local
                echo "SVC_IP: $SVC_IP"
                echo "HOSTNAME: $HOSTNAME"
                kubectl patch deployment vwkdbmc01 -n vw-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0","value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
                echo "patched in c01 vw"
            fi
            sleep 10
            echo "Log in to nonp C02 VW TKGI"
            if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
            then
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-nonp-vw-f02 -a api.mkp-nonp-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-nonp-vw-$cluster4_5
            else 
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-prod-vw-f02 -a api.mkp-prod-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-prod-vw-$cluster4_5
            fi
            vwkdbmc02_dep_exist=$(kubectl get deployment -n vw-${{ inputs.namespace }} -o name | grep "vwkdbmc02" | tr -d 'deployment.apps/' | wc -l | tr -d ' ')
            echo "vwkdbmc02_dep_exist=${vwkdbmc02_dep_exist}" >> $GITHUB_ENV
            if ${{ "$vwkdbmc02_dep_exist" -eq "1" }}
            then
                HOSTNAME=vwkdbmc02-$i.vwkdbmc02-svc.vw-${{ inputs.namespace }}.svc.cluster.local
                echo "SVC_IP: $SVC_IP"
                echo "HOSTNAME: $HOSTNAME"
                kubectl patch deployment vwkdbmc02 -n vw-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0","value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
                echo "patched in c02 vw"
            fi
            sleep 10
          done
        shell: bash

          
      - name: Update the LX C02 SVC IP in all places
        if: ${{ inputs.c02-replicasLX != '0' }}
        run: |
          sleep 10
          echo "Log in to nonp C02 LX TKGI"
          if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
          then
            tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-nonp-lx-f02 -a api.mkp-nonp-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
            kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-nonp-lx-$cluster4_5
          else 
            tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-prod-lx-f02 -a api.mkp-prod-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
            kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-prod-lx-$cluster4_5
          fi
          svc_count=$(kubectl get svc -n lx-${{ inputs.namespace }} -o name | grep -v "lxkdbmc02-svc" | tr -d 'service/' | wc -l | tr -d ' ')
          START=$(( $svc_count - 1 ))
          REQ_NUM=$(($svc_count + ${{inputs.c01-replicasLX}}))
          END=$(($svc_count - $REQ_NUM))
          for i in $(eval echo "{$START..$END}")
          do
            SVC_IP=$(kubectl get svc -n lx-${{ inputs.namespace }} lxkdbmc02-$i -o jsonpath="{.status.loadBalancer.ingress[*].ip}")
            HOSTNAME=lxkdbmc02-$i.lxkdbmc02-svc.lx-${{ inputs.namespace }}.svc.cluster.local
            kubectl patch deployment lxkdbmc02 -n lx-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            sleep 10
            echo "Log in to nonp C01 LX TKGI"
            if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
            then
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-nonp-lx-f02 -a api.mkp-nonp-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-nonp-lx-$cluster4_5
            else 
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-prod-lx-f02 -a api.mkp-prod-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-prod-lx-$cluster4_5
            fi
            HOSTNAME=lxkdbmc01-$i.lxkdbmc01-svc.lx-${{ inputs.namespace }}.svc.cluster.local
            kubectl patch deployment lxkdbmc01 -n lx-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            sleep 10
            echo "Log in to nonp C01 VW TKGI"
            if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
            then
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-nonp-vw-f02 -a api.mkp-nonp-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-nonp-vw-$cluster4_5
            else 
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-prod-vw-f02 -a api.mkp-prod-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-prod-vw-$cluster4_5
            fi
            HOSTNAME=vwkdbmc01-$i.vwkdbmc01-svc.vw-${{ inputs.namespace }}.svc.cluster.local
            kubectl patch deployment vwkdbmc01 -n vw-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            sleep 10
            echo "Log in to nonp C02 VW TKGI"
            if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
            then
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-nonp-vw-f02 -a api.mkp-nonp-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-nonp-vw-$cluster4_5
            else 
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-prod-vw-f02 -a api.mkp-prod-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-prod-vw-$cluster4_5
            fi
            HOSTNAME=vwkdbmc02-$i.vwkdbmc02-svc.vw-${{ inputs.namespace }}.svc.cluster.local
            kubectl patch deployment vwkdbmc02 -n vw-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            sleep 10
          done
        shell: bash 
      
      - name: Update the VW C01 SVC IP in all places
        if: ${{ inputs.c01-replicasVW != '0' }}
        run: |
          sleep 10
          echo "Log in to nonp C01 VW TKGI"
          if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
          then
            tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-nonp-vw-f02 -a api.mkp-nonp-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
            kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-nonp-vw-$cluster4_5
          else 
            tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-prod-vw-f02 -a api.mkp-prod-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
            kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-prod-vw-$cluster4_5
          fi
          svc_count=$(kubectl get svc -n vw-${{ inputs.namespace }} -o name | grep -v "vwkdbmc01-svc" | tr -d 'service/' | wc -l | tr -d ' ')
          START=$(( $svc_count - 1 ))
          REQ_NUM=$(($svc_count + ${{inputs.c01-replicasLX}}))
          END=$(($svc_count - $REQ_NUM))
          for i in $(eval echo "{$START..$END}")
          do
            SVC_IP=$(kubectl get svc -n vw-${{ inputs.namespace }} vwkdbmc01-$i -o jsonpath="{.status.loadBalancer.ingress[*].ip}")
            HOSTNAME=vwkdbmc01-$i.vwkdbmc01-svc.vw-${{ inputs.namespace }}.svc.cluster.local
            kubectl patch deployment vwkdbmc01 -n vw-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            sleep 10
            echo "Log in to nonp C02 LX TKGI"
            if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
            then
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-nonp-lx-f02 -a api.mkp-nonp-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-nonp-lx-$cluster4_5
            else 
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-prod-lx-f02 -a api.mkp-prod-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-prod-lx-$cluster4_5
            fi
            HOSTNAME=lxkdbmc02-$i.lxkdbmc02-svc.lx-${{ inputs.namespace }}.svc.cluster.local
            kubectl patch deployment lxkdbmc02 -n lx-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            sleep 5
            echo "Log in to nonp C01 LX TKGI"
            if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
            then
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-nonp-lx-f02 -a api.mkp-nonp-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-nonp-lx-$cluster4_5
            else 
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-prod-lx-f02 -a api.mkp-prod-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-prod-lx-$cluster4_5
            fi
            HOSTNAME=lxkdbmc01-$i.lxkdbmc01-svc.lx-${{ inputs.namespace }}.svc.cluster.local
            kubectl patch deployment lxkdbmc01 -n lx-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            sleep 10
            echo "Log in to nonp C02 VW TKGI"
            if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
            then
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-nonp-vw-f02 -a api.mkp-nonp-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-nonp-vw-$cluster4_5
            else 
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-prod-vw-f02 -a api.mkp-prod-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-prod-vw-$cluster4_5
            fi
            HOSTNAME=vwkdbmc02-$i.vwkdbmc02-svc.vw-${{ inputs.namespace }}.svc.cluster.local
            kubectl patch deployment vwkdbmc02 -n vw-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            sleep 10
          done
        shell: bash


      - name: Update the VW C02 SVC IP in all places
        if: ${{ inputs.c02-replicasVW != '0' }}
        run: |
          sleep 10
          echo "Log in to nonp C02 VW TKGI"
          if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
          then
            tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-nonp-vw-f02 -a api.mkp-nonp-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
            kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-nonp-vw-$cluster4_5
          else 
            tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-prod-vw-f02 -a api.mkp-prod-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
            kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-prod-vw-$cluster4_5
          fi
          svc_count=$(kubectl get svc -n vw-${{ inputs.namespace }} -o name | grep -v "vwkdbmc02-svc" | tr -d 'service/' | wc -l | tr -d ' ')
          START=$(( $svc_count - 1 ))
          REQ_NUM=$(($svc_count + ${{inputs.c01-replicasLX}}))
          END=$(($svc_count - $REQ_NUM))
          for i in $(eval echo "{$START..$END}")
          do
            SVC_IP=$(kubectl get svc -n vw-${{ inputs.namespace }} vwkdbmc02-$i -o jsonpath="{.status.loadBalancer.ingress[*].ip}")
            HOSTNAME=vwkdbmc02-$i.vwkdbmc02-svc.vw-${{ inputs.namespace }}.svc.cluster.local
            kubectl patch deployment vwkdbmc02 -n vw-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            sleep 10
            echo "Log in to nonp C02 LX TKGI"
            if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
            then
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-nonp-lx-f02 -a api.mkp-nonp-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-nonp-lx-$cluster4_5
            else 
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-prod-lx-f02 -a api.mkp-prod-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-prod-lx-$cluster4_5
            fi
            HOSTNAME=lxkdbmc02-$i.lxkdbmc02-svc.lx-${{ inputs.namespace }}.svc.cluster.local
            kubectl patch deployment lxkdbmc02 -n lx-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            sleep 10
            echo "Log in to nonp C01 VW TKGI"
            if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
            then
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-nonp-vw-f02 -a api.mkp-nonp-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-nonp-vw-$cluster4_5
            else 
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-prod-vw-f02 -a api.mkp-prod-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-prod-vw-$cluster4_5
            fi
            HOSTNAME=vwkdbmc01-$i.vwkdbmc01-svc.vw-${{ inputs.namespace }}.svc.cluster.local
            kubectl patch deployment vwkdbmc01 -n vw-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            sleep 10
            echo "Log in to nonp C01 LX TKGI"
            if ${{ (inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa') }}
            then
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-nonp-lx-f02 -a api.mkp-nonp-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-nonp-lx-$cluster4_5
            else 
              tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-prod-lx-f02 -a api.mkp-prod-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
              kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-prod-lx-$cluster4_5
            fi
            HOSTNAME=lxkdbmc01-$i.lxkdbmc01-svc.lx-${{ inputs.namespace }}.svc.cluster.local
            kubectl patch deployment lxkdbmc01 -n lx-${{ inputs.namespace }} --type=json -p='[{"op": "add", "path": "/spec/template/spec/hostAliases/0", "value": { "hostnames": [ "'${HOSTNAME}'" ], "ip": "'${SVC_IP}'"}}]'
            sleep 10
          done
        shell: bash

      - name: Log in to nonp C01 LX TKGI to deploy PEM
        if: ${{ (inputs.c01-replicasLX != '0') && ((inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa')) }}
        run: |
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-nonp-lx-f02 -a api.mkp-nonp-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-nonp-lx-$cluster4_5

      - name: Log in to prod C01 LX TKGI to deploy PEM
        if: ${{ (inputs.c01-replicasLX != '0') && ((inputs.env == 'stage') || (inputs.env == 'prod')) }}
        run: |
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-prod-lx-f02 -a api.mkp-prod-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-prod-lx-$cluster4_5


      - name: Cleanup before the secrets copy LX C01
        if: ${{ inputs.c01-replicasLX != '0' }}
        run: |
          rm -rf configmap/server-*
          rm -rf configmap/chain-*

      - name: Get Server Secrets for LX C01
        if: ${{ inputs.c01-replicasLX != '0' }}
        run: |
          START=$pod_running_count_c01_lx
          END=$pod_desire_count_c01_lx
          for i in $(eval echo "{$START..$END}")
          do
            kubectl get secret "lxkdbmc01-$i-${{ inputs.namespace }}" -o jsonpath='{.data.*}' -n lx-${{ inputs.namespace }} | base64 -d > server-$i.pem
            cp server-$i.pem configmap/
          done

      - name: write chain secret to LX C01
        if: ${{ inputs.c01-replicasLX != '0' }}
        env:
          CHAIN_PEM: ${{ secrets.CHAIN_PEM }}
        run: |
          START=$pod_running_count_c01_lx
          END=$pod_desire_count_c01_lx
          for i in $(eval echo "{$START..$END}")
          do
            echo "$CHAIN_PEM" > configmap/chain-$i.pem
          done

      - name: Create the configmap for lx C01
        if: ${{ inputs.c01-replicasLX != '0' }}
        run: |
          kubectl create configmap mongo-server-pem --from-file=configmap -n lx-${{ inputs.namespace }} || true

      - name: Patching deployment in LX C01
        if: ${{ inputs.c01-replicasLX != '0' }}
        run: |
          kubectl patch deployment lxkdbmc01 -n lx-${{ inputs.namespace }} --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/command/0", "value":"/mnt/scripts/run.sh"}]'
          kubectl patch deployment lxkdbmc01 -n lx-${{ inputs.namespace }} --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"repo.primetherapeutics.com:17443/mongodb:0.3"}]'
          kubectl patch deployment lxkdbmc01 -n lx-${{ inputs.namespace }} --type='json' -p '[{"op": "replace", "path": "/spec/template/spec/containers/0/volumeMounts", "value": [{"mountPath": "/mnt/certs","name": "cache-volume"},{"mountPath": "/mnt/scripts","name": "mongo-server-pem"},{"mountPath": "/mms-config","name": "lxkdbmc01-config"},{"mountPath": "/data","name": "lxkdbmc01"},{"mountPath": "/etc/ldap","name": "ldap-conf"}]}]'
          kubectl patch deployment lxkdbmc01 -n lx-${{ inputs.namespace }} --type='json' -p '[{"op": "replace", "path": "/spec/template/spec/volumes", "value": [{"emptyDir": {},"name": "cache-volume"},{"configMap": {"defaultMode": 0777,"name": "mongo-server-pem"},"name": "mongo-server-pem"},{"configMap": {"defaultMode": 420,"items": [{"key": "local.config","path": "local.config"}],"name": "lxkdbmc01-config"},"name": "lxkdbmc01-config"},{"configMap": {"defaultMode": 420,"items": [{"key": "ldap.conf","path": "ldap.conf"}],"name": "ldap-conf"},"name": "ldap-conf"},{"persistentVolumeClaim": {"claimName": "lxkdbmc01-pvc"},"name": "lxkdbmc01"}]}]'

      - name: Log in to nonp C02 LX TKGI to deploy PEM
        if: ${{ (inputs.c02-replicasLX != '0') && ((inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa')) }}
        run: |
          sleep 30
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-nonp-lx-f02 -a api.mkp-nonp-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-nonp-lx-$cluster4_5

      - name: Log in to prod C02 LX TKGI to deploy PEM
        if: ${{ (inputs.c02-replicasLX != '0') && ((inputs.env == 'stage') || (inputs.env == 'prod')) }}
        run: |
          sleep 30
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-prod-lx-f02 -a api.mkp-prod-lx-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-prod-lx-$cluster4_5

      - name: Cleanup before the secrets copy LX C02
        if: ${{ inputs.c02-replicasLX != '0' }}
        run: |
          rm -rf configmap/server-*
          rm -rf configmap/chain-*

      
      - name: Get Server Secrets for LX C02
        if: ${{ inputs.c02-replicasLX != '0' }}
        run: |
          START=$pod_running_count_c02_lx
          END=$pod_desire_count_c02_lx
          for i in $(eval echo "{$START..$END}")
          do
            kubectl get secret "lxkdbmc02-$i-${{ inputs.namespace }}" -o jsonpath='{.data.*}' -n lx-${{ inputs.namespace }} | base64 -d > server-$i.pem
            cp server-$i.pem configmap/
          done

      - name: write chain secret to LX C02
        if: ${{ inputs.c02-replicasLX != '0' }}
        env:
          CHAIN_PEM: ${{ secrets.CHAIN_PEM }}
        run: |
          START=$pod_running_count_c02_lx
          END=$pod_desire_count_c02_lx
          for i in $(eval echo "{$START..$END}")
          do
            echo "$CHAIN_PEM" > configmap/chain-$i.pem
          done

      - name: Create the configmap for lx C02
        if: ${{ inputs.c02-replicasLX != '0' }}
        run: |
          kubectl create configmap mongo-server-pem --from-file=configmap -n lx-${{ inputs.namespace }} || true

      - name: Patching deployment in LX C02
        if: ${{ inputs.c02-replicasLX != '0' }}
        run: |
          kubectl patch deployment lxkdbmc02 -n lx-${{ inputs.namespace }} --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/command/0", "value":"/mnt/scripts/run.sh"}]'
          kubectl patch deployment lxkdbmc02 -n lx-${{ inputs.namespace }} --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"repo.primetherapeutics.com:17443/mongodb:0.3"}]'
          kubectl patch deployment lxkdbmc02 -n lx-${{ inputs.namespace }} --type='json' -p '[{"op": "replace", "path": "/spec/template/spec/containers/0/volumeMounts", "value": [{"mountPath": "/mnt/certs","name": "cache-volume"},{"mountPath": "/mnt/scripts","name": "mongo-server-pem"},{"mountPath": "/mms-config","name": "lxkdbmc02-config"},{"mountPath": "/data","name": "lxkdbmc02"},{"mountPath": "/etc/ldap","name": "ldap-conf"}]}]'
          kubectl patch deployment lxkdbmc02 -n lx-${{ inputs.namespace }} --type='json' -p '[{"op": "replace", "path": "/spec/template/spec/volumes", "value": [{"emptyDir": {},"name": "cache-volume"},{"configMap": {"defaultMode": 0777,"name": "mongo-server-pem"},"name": "mongo-server-pem"},{"configMap": {"defaultMode": 420,"items": [{"key": "local.config","path": "local.config"}],"name": "lxkdbmc02-config"},"name": "lxkdbmc02-config"},{"configMap": {"defaultMode": 420,"items": [{"key": "ldap.conf","path": "ldap.conf"}],"name": "ldap-conf"},"name": "ldap-conf"},{"persistentVolumeClaim": {"claimName": "lxkdbmc02-pvc"},"name": "lxkdbmc02"}]}]'

      - name: Log in to nonp C01 VW TKGI to deploy PEM
        if: ${{ (inputs.c01-replicasVW != '0') && ((inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa')) }}
        run: |
          sleep 30
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-nonp-vw-f02 -a api.mkp-nonp-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-nonp-vw-$cluster4_5

      - name: Log in to prod C01 VW TKGI to deploy PEM
        if: ${{ (inputs.c01-replicasVW != '0') && ((inputs.env == 'stage') || (inputs.env == 'prod')) }}
        run: |
          sleep 30
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c01-mkp-prod-vw-f02 -a api.mkp-prod-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c01-mkp-prod-vw-$cluster4_5

      - name: Cleanup before the secrets copy VW C01
        if: ${{ inputs.c01-replicasVW != '0' }}
        run: |
          rm -rf configmap/server-*
          rm -rf configmap/chain-*

      - name: Get Server Secrets for VW C01
        if: ${{ inputs.c01-replicasVW != '0' }}
        run: |
          START=$pod_running_count_c01_vw
          END=$pod_desire_count_c01_vw
          for i in $(eval echo "{$START..$END}")
          do
            kubectl get secret "vwkdbmc01-$i-${{ inputs.namespace }}" -o jsonpath='{.data.*}' -n vw-${{ inputs.namespace }} | base64 -d > server-$i.pem
            cp server-$i.pem configmap/
          done

      - name: write chain secret to VW C01
        if: ${{ inputs.c01-replicasVW != '0' }}
        env:
          CHAIN_PEM: ${{ secrets.CHAIN_PEM }}
        run: |
          START=$pod_running_count_c01_vw
          END=$pod_desire_count_c01_vw
          for i in $(eval echo "{$START..$END}")
          do
            echo "$CHAIN_PEM" > configmap/chain-$i.pem
          done

      - name: Create the configmap for vw C01
        if: ${{ inputs.c01-replicasVW != '0' }}
        run: |
          kubectl create configmap mongo-server-pem --from-file=configmap -n vw-${{ inputs.namespace }} || true

      - name: Patching deployment in VW C01
        if: ${{ inputs.c01-replicasVW != '0' }}
        run: |
          kubectl patch deployment vwkdbmc01 -n vw-${{ inputs.namespace }} --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/command/0", "value":"/mnt/scripts/run.sh"}]'
          kubectl patch deployment vwkdbmc01 -n vw-${{ inputs.namespace }} --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"repo.primetherapeutics.com:17443/mongodb:0.3"}]'
          kubectl patch deployment vwkdbmc01 -n vw-${{ inputs.namespace }} --type='json' -p '[{"op": "replace", "path": "/spec/template/spec/containers/0/volumeMounts", "value": [{"mountPath": "/mnt/certs","name": "cache-volume"},{"mountPath": "/mnt/scripts","name": "mongo-server-pem"},{"mountPath": "/mms-config","name": "vwkdbmc01-config"},{"mountPath": "/data","name": "vwkdbmc01"},{"mountPath": "/etc/ldap","name": "ldap-conf"}]}]'
          kubectl patch deployment vwkdbmc01 -n vw-${{ inputs.namespace }} --type='json' -p '[{"op": "replace", "path": "/spec/template/spec/volumes", "value": [{"emptyDir": {},"name": "cache-volume"},{"configMap": {"defaultMode": 0777,"name": "mongo-server-pem"},"name": "mongo-server-pem"},{"configMap": {"defaultMode": 420,"items": [{"key": "local.config","path": "local.config"}],"name": "vwkdbmc01-config"},"name": "vwkdbmc01-config"},{"configMap": {"defaultMode": 420,"items": [{"key": "ldap.conf","path": "ldap.conf"}],"name": "ldap-conf"},"name": "ldap-conf"},{"persistentVolumeClaim": {"claimName": "vwkdbmc01-pvc"},"name": "vwkdbmc01"}]}]'       

      - name: Log in to nonp C02 VW TKGI to deploy PEM
        if: ${{ (inputs.c02-replicasVW != '0') && ((inputs.env == 'dev') || (inputs.env == 'test') || (inputs.env == 'qa')) }}
        run: |
          sleep 30
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-nonp-vw-f02 -a api.mkp-nonp-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-nonp-vw-$cluster4_5

      - name: Log in to prod C02 VW TKGI to deploy PEM
        if: ${{ (inputs.c02-replicasVW != '0') && ((inputs.env == 'stage') || (inputs.env == 'prod')) }}
        run: |
          sleep 30
          tkgi get-kubeconfig mongodb-${{ inputs.env }}-c02-mkp-prod-vw-f02 -a api.mkp-prod-vw-f02.primepcf.com -u $TKGI_USR -p $TKGI_PSW -k
          kubectl config use-context mongodb-${{ inputs.env }}-c02-mkp-prod-vw-$cluster4_5

      - name: Cleanup before the secrets copy VW C02
        if: ${{ inputs.c02-replicasVW != '0' }}
        run: |
          rm -rf configmap/server-*
          rm -rf configmap/chain-*
      
      - name: Get Server Secrets for VW C02
        if: ${{ inputs.c02-replicasVW != '0' }}
        run: |
          START=$pod_running_count_c02_vw
          END=$pod_desire_count_c02_vw
          for i in $(eval echo "{$START..$END}")
          do
            kubectl get secret "vwkdbmc02-$i-${{ inputs.namespace }}" -o jsonpath='{.data.*}' -n vw-${{ inputs.namespace }} | base64 -d > server-$i.pem
            cp server-$i.pem configmap/
          done

      - name: write chain secret to VW C02
        if: ${{ inputs.c02-replicasVW != '0' }}
        env:
          CHAIN_PEM: ${{ secrets.CHAIN_PEM }}
        run: |
          START=$pod_running_count_c02_vw
          END=$pod_desire_count_c02_vw
          for i in $(eval echo "{$START..$END}")
          do
             echo "$CHAIN_PEM" > configmap/chain-$i.pem
          done

      - name: Create the configmap for vw C02
        if: ${{ inputs.c02-replicasVW != '0' }}
        run: |
          kubectl create configmap mongo-server-pem --from-file=configmap -n vw-${{ inputs.namespace }} || true

      - name: Patching deployment in VW C02
        if: ${{ inputs.c02-replicasVW != '0' }}
        run: |
          kubectl patch deployment vwkdbmc02 -n vw-${{ inputs.namespace }} --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/command/0", "value":"/mnt/scripts/run.sh"}]'
          kubectl patch deployment vwkdbmc02 -n vw-${{ inputs.namespace }} --type='json' -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/image", "value":"repo.primetherapeutics.com:17443/mongodb:0.3"}]'
          kubectl patch deployment vwkdbmc02 -n vw-${{ inputs.namespace }} --type='json' -p '[{"op": "replace", "path": "/spec/template/spec/containers/0/volumeMounts", "value": [{"mountPath": "/mnt/certs","name": "cache-volume"},{"mountPath": "/mnt/scripts","name": "mongo-server-pem"},{"mountPath": "/mms-config","name": "vwkdbmc02-config"},{"mountPath": "/data","name": "vwkdbmc02"},{"mountPath": "/etc/ldap","name": "ldap-conf"}]}]'
          kubectl patch deployment vwkdbmc02 -n vw-${{ inputs.namespace }} --type='json' -p '[{"op": "replace", "path": "/spec/template/spec/volumes", "value": [{"emptyDir": {},"name": "cache-volume"},{"configMap": {"defaultMode": 0777,"name": "mongo-server-pem"},"name": "mongo-server-pem"},{"configMap": {"defaultMode": 420,"items": [{"key": "local.config","path": "local.config"}],"name": "vwkdbmc02-config"},"name": "vwkdbmc02-config"},{"configMap": {"defaultMode": 420,"items": [{"key": "ldap.conf","path": "ldap.conf"}],"name": "ldap-conf"},"name": "ldap-conf"},{"persistentVolumeClaim": {"claimName": "vwkdbmc02-pvc"},"name": "vwkdbmc02"}]}]'       

      - name: Always run the script
        run: |
          rm -rf *-statefulset.yaml chain*.pem server*.pem
